/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    categories: Category;
    pages: Page;
    posts: Post;
    media: Media;
    'board-members': BoardMember;
    branches: Branch;
    'player-badges': PlayerBadge;
    partners: Partner;
    tags: Tag;
    forms: Form;
    'form-submissions': FormSubmission;
    redirects: Redirect;
  };
  globals: {
    header: Header;
    footer: Footer;
    'index-page': IndexPage;
  };
}
export interface User {
  id: string;
  name?: string;
  roles?: ('admin' | 'user')[];
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}
export interface Category {
  id: string;
  title?: string;
  parent?: string | Category;
  breadcrumbs?: {
    doc?: string | Category;
    url?: string;
    label?: string;
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}
export interface Page {
  id: string;
  title: string;
  publishedDate?: string;
  layout: (
    | {
        ctaBackgroundColor?:
          | 'primary'
          | 'darkGrey'
          | 'greyBlue'
          | 'secondary'
          | 'yellow'
          | 'black'
          | 'error'
          | 'info'
          | 'success'
          | 'warning'
          | 'white';
        richText: {
          [k: string]: unknown;
        }[];
        links?: {
          link: {
            type?: 'reference' | 'custom';
            newTab?: boolean;
            reference: {
              value: string | Page;
              relationTo: 'pages';
            };
            url: string;
            label: string;
            appearance?: 'primary' | 'secondary';
          };
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'cta';
      }
    | {
        backgroundColor?:
          | 'primary'
          | 'darkGrey'
          | 'greyBlue'
          | 'secondary'
          | 'yellow'
          | 'black'
          | 'error'
          | 'info'
          | 'success'
          | 'warning'
          | 'white';
        columns?: {
          size?: 'oneQuarter' | 'oneThird' | 'half' | 'twoThirds' | 'full';
          richText: {
            [k: string]: unknown;
          }[];
          enableLink?: boolean;
          link?: {
            type?: 'reference' | 'custom';
            newTab?: boolean;
            reference: {
              value: string | Page;
              relationTo: 'pages';
            };
            url: string;
            label: string;
            appearance?: 'default' | 'primary' | 'secondary';
          };
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'content';
      }
    | {
        form: string | Form;
        enableIntro?: boolean;
        introContent: {
          [k: string]: unknown;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'formBlock';
      }
    | {
        mediaBlockBackgroundColor?:
          | 'primary'
          | 'darkGrey'
          | 'greyBlue'
          | 'secondary'
          | 'yellow'
          | 'black'
          | 'error'
          | 'info'
          | 'success'
          | 'warning'
          | 'white';
        position?: 'default' | 'fullscreen';
        media: string | Media;
        id?: string;
        blockName?: string;
        blockType: 'mediaBlock';
      }
    | {
        introContent: {
          [k: string]: unknown;
        }[];
        populateBy?: 'collection' | 'selection';
        relationTo?: 'pages';
        categories?: string[] | Category[];
        limit?: number;
        selectedDocs?:
          | (
              | {
                  value: string;
                  relationTo: 'pages';
                }
              | {
                  value: string;
                  relationTo: 'posts';
                }
            )[]
          | (
              | {
                  value: Page;
                  relationTo: 'pages';
                }
              | {
                  value: Post;
                  relationTo: 'posts';
                }
            )[];
        populatedDocs?:
          | (
              | {
                  value: string;
                  relationTo: 'pages';
                }
              | {
                  value: string;
                  relationTo: 'posts';
                }
            )[]
          | (
              | {
                  value: Page;
                  relationTo: 'pages';
                }
              | {
                  value: Post;
                  relationTo: 'posts';
                }
            )[];
        populatedDocsTotal?: number;
        id?: string;
        blockName?: string;
        blockType: 'archive';
      }
    | {
        mediaBlockBackgroundColor?:
          | 'primary'
          | 'darkGrey'
          | 'greyBlue'
          | 'secondary'
          | 'yellow'
          | 'black'
          | 'error'
          | 'info'
          | 'success'
          | 'warning'
          | 'white';
        headline?: {
          [k: string]: unknown;
        }[];
        text?: {
          [k: string]: unknown;
        }[];
        imageRight: string | Media;
        imageLeft: string | Media;
        imageLogo: string | Media;
        id?: string;
        blockName?: string;
        blockType: 'indexHero';
      }
    | {
        headline?: string;
        subline?: string;
        id?: string;
        blockName?: string;
        blockType: 'divider';
      }
    | {
        items?: {
          callName: string;
          name: string;
          position: string;
          link?: string;
          joinedAt: string;
          image: string | Media;
          playerBadges?: string[] | PlayerBadge[];
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'team-gallery';
      }
  )[];
  slug?: string;
  parent?: string | Page;
  breadcrumbs?: {
    doc?: string | Page;
    url?: string;
    label?: string;
    id?: string;
  }[];
  meta?: {
    title?: string;
    description?: string;
    image?: string | Media;
  };
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}
export interface Form {
  id: string;
  title: string;
  fields?: (
    | {
        name: string;
        label?: string;
        width?: number;
        defaultValue?: string;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'text';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        defaultValue?: string;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'textarea';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        defaultValue?: string;
        options?: {
          label: string;
          value: string;
          id?: string;
        }[];
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'select';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'email';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'state';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'country';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        defaultValue?: number;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'number';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        required?: boolean;
        defaultValue?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'checkbox';
      }
    | {
        message?: {
          [k: string]: unknown;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'message';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        basePrice?: number;
        priceConditions?: {
          fieldToUse?: string;
          condition?: 'hasValue' | 'equals' | 'notEquals';
          valueForCondition?: string;
          operator?: 'add' | 'subtract' | 'multiply' | 'divide';
          valueType?: 'static' | 'valueOfField';
          valueForOperator?: string;
          id?: string;
        }[];
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'payment';
      }
  )[];
  submitButtonLabel?: string;
  confirmationType?: 'message' | 'redirect';
  confirmationMessage: {
    [k: string]: unknown;
  }[];
  redirect?: {
    url: string;
  };
  emails?: {
    emailTo?: string;
    cc?: string;
    bcc?: string;
    replyTo?: string;
    emailFrom?: string;
    subject: string;
    message?: {
      [k: string]: unknown;
    }[];
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}
export interface Media {
  id: string;
  alt: string;
  caption?: {
    [k: string]: unknown;
  }[];
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
}
export interface Post {
  id: string;
  title: string;
  text: {
    [k: string]: unknown;
  }[];
  publishedDate: string;
  startAt: string;
  endAt: string;
  image: string | Media;
  author: string | BoardMember;
  tag: string | Tag;
  updatedAt: string;
  createdAt: string;
}
export interface BoardMember {
  id: string;
  name: string;
  birthday: string;
  image: string | Media;
  instagramLink: string;
  snapchatLink: string;
  linkedinLink: string;
  roles?: ('admin' | 'user')[];
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}
export interface Tag {
  id: string;
  name: string;
  color: 'secondary' | 'gaming' | 'eSports' | 'airsoft';
  updatedAt: string;
  createdAt: string;
}
export interface PlayerBadge {
  id: string;
  name: string;
  image: string | Media;
  updatedAt: string;
  createdAt: string;
}
export interface Branch {
  id: string;
  displayName: string;
  shortDescription: string;
  image: string | Media;
  description: {
    [k: string]: unknown;
  }[];
  leader: {
    name: string;
    description: string;
    image: string | Media;
    birthday: string;
  };
  partners?: string[] | Partner[];
  layout: (
    | {
        headline?: string;
        image: string | Media;
        logo: string | Media;
        id?: string;
        blockName?: string;
        blockType: 'branchHero';
      }
    | {
        backgroundColor?:
          | 'primary'
          | 'darkGrey'
          | 'greyBlue'
          | 'secondary'
          | 'yellow'
          | 'black'
          | 'error'
          | 'info'
          | 'success'
          | 'warning'
          | 'white';
        columns?: {
          size?: 'oneQuarter' | 'oneThird' | 'half' | 'twoThirds' | 'full';
          richText: {
            [k: string]: unknown;
          }[];
          enableLink?: boolean;
          link?: {
            type?: 'reference' | 'custom';
            newTab?: boolean;
            reference: {
              value: string | Page;
              relationTo: 'pages';
            };
            url: string;
            label: string;
            appearance?: 'default' | 'primary' | 'secondary';
          };
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'content';
      }
    | {
        headline?: string;
        subline?: string;
        id?: string;
        blockName?: string;
        blockType: 'divider';
      }
    | {
        items?: {
          image: string | Media;
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'gallery';
      }
    | {
        items?: {
          callName: string;
          name: string;
          position: string;
          link?: string;
          joinedAt: string;
          image: string | Media;
          playerBadges?: string[] | PlayerBadge[];
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'team-gallery';
      }
  )[];
  slug?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Partner {
  id: string;
  name: string;
  logo: string | Media;
  smallLogo?: string | Media;
  benefits: {
    [k: string]: unknown;
  }[];
  howToGet: {
    [k: string]: unknown;
  }[];
  branches?: string[] | Branch[];
  slug?: string;
  updatedAt: string;
  createdAt: string;
}
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?: {
    field: string;
    value: string;
    id?: string;
  }[];
  payment?: {
    field?: string;
    status?: string;
    amount?: number;
    paymentProcessor?: string;
    creditCard?: {
      token?: string;
      brand?: string;
      number?: string;
    };
  };
  updatedAt: string;
  createdAt: string;
}
export interface Redirect {
  id: string;
  from: string;
  to: {
    type?: 'reference' | 'custom';
    reference:
      | {
          value: string | Page;
          relationTo: 'pages';
        }
      | {
          value: string | Post;
          relationTo: 'posts';
        };
    url: string;
  };
  updatedAt: string;
  createdAt: string;
}
export interface Header {
  id: string;
  navItems?: {
    link: {
      type?: 'reference' | 'custom';
      newTab?: boolean;
      reference: {
        value: string | Page;
        relationTo: 'pages';
      };
      url: string;
      label: string;
    };
    id?: string;
  }[];
  updatedAt?: string;
  createdAt?: string;
}
export interface Footer {
  id: string;
  navItems?: {
    link: {
      type?: 'reference' | 'custom';
      newTab?: boolean;
      reference: {
        value: string | Page;
        relationTo: 'pages';
      };
      url: string;
      label: string;
    };
    id?: string;
  }[];
  updatedAt?: string;
  createdAt?: string;
}
export interface IndexPage {
  id: string;
  hero: {
    mediaBlockBackgroundColor?:
      | 'primary'
      | 'darkGrey'
      | 'greyBlue'
      | 'secondary'
      | 'yellow'
      | 'black'
      | 'error'
      | 'info'
      | 'success'
      | 'warning'
      | 'white';
    headline?: string;
    subline?: string;
    text?: string;
    imageRight: string | Media;
    imageLeft: string | Media;
    imageLogo: string | Media;
  };
  grid?: {
    text?: string;
    id?: string;
  }[];
  updatedAt?: string;
  createdAt?: string;
}
